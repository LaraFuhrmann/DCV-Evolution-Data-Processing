from snakemake.utils import min_version
min_version("6.0")

configfile: "config/config.yaml"

module vpipe:
    snakefile: "../resources/V-pipe/workflow/Snakefile" #github("cbg-ethz/V-pipe", path="workflow/Snakefile", tag="v2.99.2") #"../V-Pipe-v2.99.2" #
    config: config["vpipe"] #"config/config_vpipe.yaml"

use rule * from vpipe as vpipe_*

rule all:
    input:
        rules.vpipe_all.input,
        f"results/coverage_diagnostics_",
        f"results/aggregated_diversity.csv",
        f"results/aggregated_entropy.csv",
        f"results/cooccurring_mutations.csv",
        f"results/all_mutations.csv",
    default_target: True


rule coverage_diagnostics:
    input:
        fnames=expand(rules.vpipe_snv.output.VCF, dataset=vpipe.datasets),
    output:
        out_dir=f"results/coverage_diagnostics_"
    resources:
        mem_mb=6024,
        time_min=840,
    conda:
        "envs/diversity_measures.yaml"
    script:
        "./scripts/coverage_diagnostics.py"


rule compute_diversity_measures:
    input:
        fnames_samples_snvs_vcf="{dataset}/variants/SNVs/snvs.vcf",
        fname_ref=config['vpipe']['input']['reference'],
    output:
        diversity_csv="{dataset}/variants/SNVs/diversity_measures.csv",
        shannon_csv="{dataset}/variants/SNVs/position_shannon_entropy.csv",
    conda:
        "envs/diversity_measures.yaml"
    script:
        "./scripts/compute_diversity_measures.py"

rule collect_diversity:
    input:
        fnames_diversity=expand(
            "{dataset}/variants/SNVs/diversity_measures.csv", dataset=vpipe.datasets
        ),
        fnames_shannon=expand(
            "{dataset}/variants/SNVs/position_shannon_entropy.csv", dataset=vpipe.datasets
        ),
    output:
        diversity_csv=f"results/aggregated_diversity.csv",
        shannon_csv=f"results/aggregated_entropy.csv",
    conda:
        "envs/diversity_measures.yaml"
    script:
        "./scripts/aggregate_diversity.py"


rule collect_cooccurring_mutations:
    input:
        dnames_shorah=expand(rules.vpipe_snv.output.VCF, dataset=vpipe.datasets),
        fname_reference=config['vpipe']['input']['reference'],
    output:
        fname_cooccurring_mutations=f"results/cooccurring_mutations.csv",
    conda:
        "envs/co-occurring_mutations.yaml"
    script:
        "./scripts/collect_cooccurring_mutations.py"

rule collect_all_mutations:
    input:
        dnames_shorah=expand(rules.vpipe_snv.output.VCF, dataset=vpipe.datasets),
    output:
        fname_all_mutations=f"results/all_mutations.csv",
    conda:
        "envs/co-occurring_mutations.yaml"
    script:
        "./scripts/collect_mutations.py"
