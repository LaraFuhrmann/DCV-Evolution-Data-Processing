from snakemake.utils import min_version
min_version("6.0")

configfile: "config/config.yaml"

module vpipe:
    snakefile: "../../../V-pipe/workflow/Snakefile" #github("cbg-ethz/V-pipe", path="workflow/Snakefile", tag="v2.99.2") #"../V-Pipe-v2.99.2" #
    config: config["vpipe"] #"config/config_vpipe.yaml"

use rule * from vpipe as vpipe_*

rule all:
    input:
        rules.vpipe_all.input,
        config['output_dir']+f"/coverage_all.csv",
        config['output_dir']+f"/coverage_distribution_1000coverage.pdf",
        config['output_dir']+f"/aggregated_diversity.csv",
        config['output_dir']+f"/aggregated_entropy.csv",
        config['output_dir']+f"/cooccurring_mutations.csv",
        config['output_dir']+f"/all_mutations.csv",
        config['output_dir']+f"/all_mutations.annotated.csv",
        config['output_dir']+f"/all_mutations.annotated.corrected.csv",
        config['output_dir']+f"/all_consensus.fasta",
        config['output_dir']+f"/all_mutations.EB_space.csv",
        config['output_dir']+f"/cooccurring_mutations.EB_space.csv",
        config['output_dir']+f"/snpgenie_codon_results.csv",
        config['output_dir']+f"/snpgenie_population_summary.csv",
        config['output_dir']+f"/snpgenie_product_results.csv",
        config['output_dir']+f"/snpgenie_site_results.csv",
    default_target: True


rule coverage_diagnostics:
    input:
        fnames=expand(rules.vpipe_basecounts.output.COVERAGE, dataset=vpipe.datasets),
    output:
        fname_coverage_all=config['output_dir']+f"/coverage_all.csv",
        fname_coverage_plt=config['output_dir']+f"/coverage_distribution_1000coverage.pdf",
    resources:
        mem_mb=6024,
        time_min=840,
    conda:
        "envs/diversity_measures.yaml"
    script:
        "./scripts/coverage_diagnostics.py"


rule compute_diversity_measures:
    input:
        fnames_samples_snvs_vcf="{dataset}/variants/SNVs/snvs.vcf",
        fname_ref=config['vpipe']['input']['reference'],
    output:
        diversity_csv="{dataset}/variants/SNVs/diversity_measures.csv",
        shannon_csv="{dataset}/variants/SNVs/position_shannon_entropy.csv",
    conda:
        "envs/diversity_measures.yaml"
    script:
        "./scripts/compute_diversity_measures.py"

rule collect_diversity:
    input:
        fnames_diversity=expand(
            "{dataset}/variants/SNVs/diversity_measures.csv", dataset=vpipe.datasets
        ),
        fnames_shannon=expand(
            "{dataset}/variants/SNVs/position_shannon_entropy.csv", dataset=vpipe.datasets
        ),
    output:
        diversity_csv=config['output_dir']+f"/aggregated_diversity.csv",
        shannon_csv=config['output_dir']+f"/aggregated_entropy.csv",
    conda:
        "envs/diversity_measures.yaml"
    script:
        "./scripts/aggregate_diversity.py"


rule collect_cooccurring_mutations:
    input:
        dnames_shorah=expand(rules.vpipe_snv.output.VCF, dataset=vpipe.datasets),
        fname_reference=config['vpipe']['input']['reference'],
    output:
        fname_cooccurring_mutations=config['output_dir']+f"/cooccurring_mutations.csv",
    conda:
        "envs/co-occurring_mutations.yaml"
    script:
        "./scripts/collect_cooccurring_mutations.py"

rule transfrom_cooccurring_mutations_to_EB_space:
    input:
        fname_all_mutations=config['output_dir']+f"/cooccurring_mutations.csv",
    output:
        fname_all_mutations_shifted=config['output_dir']+f"/cooccurring_mutations.EB_space.csv",
    conda:
        "envs/annotate_vcf.yaml"
    script:
        "./scripts/transfrom_cooccurring_mutations_to_EB_space.py"

rule collect_all_mutations:
    input:
        fnames_snv_csv=expand(rules.vpipe_snv.output.CSV, dataset=vpipe.datasets),
    output:
        fname_all_mutations=config['output_dir']+f"/all_mutations.csv",
    conda:
        "envs/co-occurring_mutations.yaml"
    script:
        "./scripts/collect_mutations.py"

rule transfrom_mutations_to_EB_space:
    input:
        fname_all_mutations=config['output_dir']+f"/all_mutations.csv",
    output:
        fname_all_mutations_shifted=config['output_dir']+f"/all_mutations.EB_space.csv",
    conda:
        "envs/annotate_vcf.yaml"
    script:
        "./scripts/transfrom_mutations_to_EB_space.py"

rule collect_consensus_sequences:
    input:
        fnames_consensus = expand(rules.vpipe_consensus_sequences.output.REF_majority_dels, dataset=vpipe.datasets),
    output:
        fname_merged = config['output_dir']+f"/all_consensus.fasta",
    conda:
        "envs/co-occurring_mutations.yaml"
    script:
        "./scripts/collect_consensus_sequences.py"

rule annotate_vcf:
    input:
        fname_snvs_vcf="{dataset}/variants/SNVs/snvs.vcf",
        fname_genbank_file="resources/references/dcv_eb_ref_annotation_genomic.gbff",
    output:
        fname_snvs_vcf="{dataset}/variants/SNVs/snvs.annotated.vcf",
    params:
        path_vcf_annotator="resources/vcf-annotator/vcf-annotator.py",
    conda:
        "envs/annotate_vcf.yaml"
    script:
        "./scripts/annotate_vcf.py"

rule collect_annotated_mutations:
    input:
        fnames_snv_csv=expand("{dataset}/variants/SNVs/snvs.annotated.vcf", dataset=vpipe.datasets),
    output:
        fname_all_mutations=config['output_dir']+f"/all_mutations.annotated.csv",
    conda:
        "envs/annotate_vcf.yaml"
    script:
        "./scripts/collect_annotated_mutations.py"

rule corrected_annotate_vcf:
    input:
        fname_snvs_vcf="{dataset}/variants/SNVs/snvs.vcf",
        fname_genbank_file="resources/references/dcv_eb_ref_annotation_genomic.gbff",
    output:
        fname_snvs_vcf="{dataset}/variants/SNVs/snvs.annotated.corrected.vcf",
    conda:
        "envs/annotate_vcf.yaml"
    script:
        "./scripts/corrected_annotate_vcf.py"

rule corrected_collect_annotated_mutations:
    input:
        fnames_snv_csv=expand("{dataset}/variants/SNVs/snvs.annotated.corrected.vcf", dataset=vpipe.datasets),
    output:
        fname_all_mutations=config['output_dir']+f"/all_mutations.annotated.corrected.csv",
    conda:
        "envs/annotate_vcf.yaml"
    script:
        "./scripts/collect_annotated_mutations.py"

rule run_snpgenie:
    input:
        fname_snvs_vcf="{dataset}/variants/SNVs/snvs.vcf",
        fname_reference="resources/references/parental_stock.consensus.bcftools.fasta",
        fname_gtffile="resources/references/dcv_CDS_annotations.gtf",
    output:
        fname_codon="{dataset}/variants/SNVs/SNPGenie_Results_work/codon_results.txt",
        fname_population_summary="{dataset}/variants/SNVs/SNPGenie_Results_work/population_summary.txt",
        fname_product_results="{dataset}/variants/SNVs/SNPGenie_Results_work/product_results.txt",
        fname_site_results="{dataset}/variants/SNVs/SNPGenie_Results_work/site_results.txt",
        dname_work="{dataset}/variants/SNVs/SNPGenie_Results_work/",
    conda:
        "envs/snpgenie.yaml"
    script:
        "./scripts/run_snpgenie.py"

rule collect_snpgenie:
    input:
        fname_codon=expand("{dataset}/variants/SNVs/SNPGenie_Results_work/codon_results.txt", dataset=vpipe.datasets),
        fname_population_summary=expand("{dataset}/variants/SNVs/SNPGenie_Results_work/population_summary.txt", dataset=vpipe.datasets),
        fname_product_results=expand("{dataset}/variants/SNVs/SNPGenie_Results_work/product_results.txt", dataset=vpipe.datasets),
        fname_site_results=expand("{dataset}/variants/SNVs/SNPGenie_Results_work/site_results.txt", dataset=vpipe.datasets),
    output:
        fname_codon=config['output_dir']+f"/snpgenie_codon_results.csv",
        fname_population_summary=config['output_dir']+f"/snpgenie_population_summary.csv",
        fname_product_results=config['output_dir']+f"/snpgenie_product_results.csv",
        fname_site_results=config['output_dir']+f"/snpgenie_site_results.csv",
    conda:
        "envs/snpgenie.yaml"
    script:
        "./scripts/collect_snpgenie_results.py"
